package ru.mslotvi.exchange;

import java.time.LocalDate;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.CompletableFuture;

/**
 * Интерфейс, представляющий биржу.
 * <p>Этот интерфейс описывает базовые операции, которые могут быть выполнены на бирже,
 * включая загрузку данных, получение списка торговых досок, ценных бумаг и расчет эффективной линии портфелей.</p>
 */
public interface Exchange {

    /**
     * Загружает необходимые данные асинхронно.
     * <p>Этот метод выполняет асинхронную загрузку данных, которые могут быть необходимы для дальнейшего анализа или расчетов.
     * Метод возвращает {@link CompletableFuture}, который завершится, когда загрузка данных будет завершена.</p>
     *
     * @return {@link CompletableFuture<Void>} объект, представляющий асинхронную задачу загрузки данных.
     */
    CompletableFuture<Void> loadData();

    /**
     * Получает список торговых досок.
     * <p>Метод возвращает список всех доступных торговых досок, которые могут быть использованы для дальнейших операций
     * или анализа.</p>
     *
     * @return Список {@link ExchangeBoard}, представляющий доступные торговые доски.
     */
    List<ExchangeBoard> getBoards();

    /**
     * Получает все ценные бумаги, доступные в системе.
     * <p>Метод возвращает карту, где ключом является уникальный идентификатор ценной бумаги,
     * а значением — сама ценная бумага, которая может быть использована для дальнейшего анализа.</p>
     *
     * @return Карта с ключом типа {@link String} (идентификатор ценной бумаги) и значением типа {@link ExchangeSecuritie} (объект ценной бумаги).
     */
    Map<String, ExchangeSecuritie> getSecurities();



    /**
     * Создает объект {@link PortfolioCalculator}, который будет использоваться для расчетов эффективной линии
     * на основе указанных ценных бумаг и временного интервала.
     * <p>Метод создает и возвращает {@link PortfolioCalculator}, который позволяет провести дальнейшие вычисления
     * для эффективной линии на основе ценных бумаг, определяемых по уникальным идентификаторам ({@code ids}),
     * в указанном временном интервале {@code start} и {@code end}.</p>
     *
     * @param ids Множество идентификаторов ценных бумаг, для которых будет вычисляться эффективная линия.
     * @param start Дата начала временного интервала, для которого будет проводиться анализ.
     * @param end Дата окончания временного интервала, для которого будет проводиться анализ.
     *
     * @return Объект {@link PortfolioCalculator}, который будет использоваться для дальнейших расчетов эффективной линии.
     */
    PortfolioCalculator createPortfolioCalculator(Set<String> ids, LocalDate start, LocalDate end);

    List<Portfolio> generatePortfolios(Set<String> ids, LocalDate start, LocalDate end, int amount);

    String name();
}
